library(tidyverse)
library(lubridate)
library(stringr)
# Cargamos los datos
datos_pm <- readr::read_delim("Tarea/Tarea1/ParqueOHiggins-PM10.csv", delim = ";")
# Cargamos los datos
datos_pm <- readr::read_delim("ParqueOHiggins-PM10.csv", delim = ";")
datos_pm
# Seleccionamos las variables de interés
datos_pm <- datos_pm |>
select(c(`FECHA (YYMMDD)`, `Registros validados`))
# cambiamos el nombre las variables
colnames(datos_pm) <- c("fecha", "pm10")
# Creamos una nueva variable con el formato de fecha
datos_pm <- datos_pm |>
mutate(fecha2 = lubridate::ymd(fecha))
plot(datos_pm$fecha2, datos_pm$pm10, type = "l")
datos_pm |>
ggplot(aes(fecha2, pm10)) +
geom_line() +
geom_smooth()
# cargamos de humedad
humedad <- readr::read_delim("Humedad.csv", delim = ";")
# cambiamos el nombre de las columnas
colnames(humedad) <- c("fecha", "hora", "valor", "vacio")
humedad
# los datos no vienen en el mismo formato que los datos de pm10 (promedio mensual)
# por lo que transformamos los
humedad <- humedad |>
# eliminamos la ultima variable que no contiene informacion
select(-c(vacio)) |>
# creamos fecha2 como formato fecha
mutate(fecha2 = lubridate::ymd(fecha)) |>
# extraemos el año
mutate(anio = year(fecha2)) |>
# extraemos el mes
mutate(mes = month(fecha2)) |>
# obtenemos el promedio mensual (omitimos los na)y desagrupamos
group_by(anio, mes) |>
summarise(promedio_mensual = mean(valor, na.rm = TRUE)) |>
ungroup() |>
# concatenamos la fecha (si el mes es menor que 10 se agrega un 0)
mutate(fecha = ifelse(mes / 10 >= 1, str_c(anio, mes, "01"),
str_c(anio, "0", mes, "01"))) |>
# transformamos la fecha al formato correcto
mutate(fecha = ymd(fecha))
# Cargamos los datos
datos_pm <- readr::read_delim("Punta_Arenas_2023-10-09-16-21.csv", delim = ";")
datos_pm
datos_pm <- readr::read_delim("ParqueOHiggins-PM10.csv", delim = ";")
# Seleccionamos las variables de interés
datos_pm <- datos_pm |>
select(c(`FECHA (YYMMDD)`, `Registros validados`))
# cambiamos el nombre las variables
colnames(datos_pm) <- c("fecha", "pm10")
# Creamos una nueva variable con el formato de fecha
datos_pm <- datos_pm |>
mutate(fecha2 = lubridate::ymd(fecha))
plot(datos_pm$fecha2, datos_pm$pm10, type = "l")
datos_pm |>
ggplot(aes(fecha2, pm10)) +
geom_line() +
geom_smooth()
datos_pm$fecha
Y = ts(datos_pm$fecha, frequency = 12)
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1, 1997:2023))
Y
# Cargamos los datos
datos_pm <- readr::read_delim("ParqueOHiggins-PM10.csv", delim = ";")
datos_pm$`FECHA (YYMMDD)`
datos_pm <- datos_pm |>
select(c(`FECHA (YYMMDD)`, `Registros validados`))
# cambiamos el nombre las variables
colnames(datos_pm) <- c("fecha", "pm10")
# Creamos una nueva variable con el formato de fecha
datos_pm <- datos_pm |>
mutate(fecha2 = lubridate::ymd(fecha))
plot(datos_pm$fecha2, datos_pm$pm10, type = "l")
datos_pm |>
ggplot(aes(fecha2, pm10)) +
geom_line() +
geom_smooth()
datos_pm$fecha2
Y = ts(datos_pm$pm10, start = c(1997, 05), end = c(2022, 12), frequency = 12)
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1, 1997:2023))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "")
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1, 1997:2023))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1, 1997:2022))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(2, 1997:2022))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1997:2022))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = axis(1, 1997:2022))
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = "")
axis(1, 1997:2022))
axis(1, 1997:2022)
## Vemos si necesita transformación
lambda = forecast::BoxCox.lambda(Y, method = "guerrero")
lambda
?forecast::BoxCox.lambda
lambda2 = forecast::BoxCox.lambda(Y, method = "loglik")
lambda2
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
plot(forecast::BoxCox(Y, lambda = lambda1), col = "steelblue", lwd = 2,
xaxt = "n", ylab = "", main = "Transformacionn Box Cox - Estación Parque O'Higgins",
xlab = "")
## Vemos si necesita transformación
lambda1 = forecast::BoxCox.lambda(Y, method = "guerrero")
lambda2 = forecast::BoxCox.lambda(Y, method = "loglik")
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
plot(forecast::BoxCox(Y, lambda = lambda1), col = "steelblue", lwd = 2,
xaxt = "n", ylab = "", main = "Transformacionn Box Cox - Estación Parque O'Higgins",
xlab = "")
axis(1, 1997:2022)
par(mfrow = c(1,1), bty = "n", las = 1, font.main = 1)
plot(Y, col = "steelblue", lwd = 2, xaxt = "n", ylab = "", xlab = "",
main = "PM10 Estación Parque 0'Higgins")
axis(1, 1997:2022)
plot(forecast::BoxCox(Y, lambda = lambda1), col = "steelblue", lwd = 2,
xaxt = "n", ylab = "", main = "Transformacionn Box Cox - PM10 Estación Parque O'Higgins",
xlab = "")
axis(1, 1997:2022)
plot(forecast::BoxCox(Y, lambda = lambda2), col = "steelblue", lwd = 2,
xaxt = "n", ylab = "", main = "Transformacionn Box Cox - PM10 Estación Parque O'Higgins",
xlab = "")
axis(1, 1997:2022)
plot(forecast::BoxCox(Y, lambda = lambda1), col = "steelblue", lwd = 2,
xaxt = "n", ylab = "", main = "Transformacionn Box Cox - PM10 Estación Parque O'Higgins",
xlab = "")
axis(1, 1997:2022)
## Ordenes de ingtegración
d = forecast::ndiffs(Y)
D = forecast::nsdiffs(Y)
d,D
c(d,D)
d
forecast::ndiffs(Y)
?forecast::ndiffs
## forecast::auto.arima
fit = forecast::auto.arima(Y, lambda = lambda)
source("summary.arima.R")
source("TS.diag.R")
source("salida.arima.R")
fit$res
fit$residuals
TS.diag(fit$residuals)
salida.arima(fit)
salida.arima(Y = Y, fit = fit)
summary.arima(fit)
summary.arima(fit = fit)
fit
summary.arima(fit)
summary.arima(fit$residuals)
summary.arima(fit$res)
summary.arima(fit)
z.value = fit$coef[is.na(fixed)]/sqrt(diag(fit$var.coef))
fit
datos_pm
